'\"
.\"-
.\" Copyright Â© 2012 brian m. carlson
.\"
.\" This documentation is free software; you can redistribute it and/or modify
.\" it under the terms of your choice of:
.\" * version 2 of the GNU General Public License as published by the Free
.\"   Software Foundation;
.\" * version 2.0 of the Apache License as published by the Apache Software
.\"   Foundation; or
.\" * version 3.0 of the Creative Commons Attribution-ShareAlike License as
.\"   published by Creative Commons.
.\"
.\" This documentation is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" relevant licenses for more details.
.\"
.\" The only reference used here was the output of gcc itself.  No reference was
.\" made to other documentation during the writing of this manual page.
.TH GCC 1 2012-01-01 GNU Debian
.SH NAME
gcc \- the GNU C Compiler
.SH SYNOPSIS
.B gcc
[\c
.IR options "] " FILE ...
.SH DESCRIPTION
.B gcc
is the GNU C compiler.  It is used to compile programs written in C or similar
languages into programs and libraries for execution.
.P
While the
.B gcc
frontentd can also be used to compile other languages (see the
.B \-x
option), using the appropriate frontend is often better as it often includes
important libraries and options needed for successful compilation.  These
frontends are
.B g++
for C++,
.B gfortran
for Fortran,
.B gobjc
for Objective-C,
.B gobjc++
for Objective-C++, and
.B gccgo
for Go.
.B cpp
may be used if only the C preprocessor is needed; alternately, the
.B \-E
option to an appropriate frontend may be used.
.SH OPTIONS
.B gcc
supports a large number of options.  Most of these options can be used with any
frontend, but some are specific to a particular language or platform (processor
architecture or operating system).
.SS "General Options"
.TP
.B \-c
Invoke only the preprocessor (if appropriate), the compiler, and the assembler.
The result is an object file for the target platform.
.TP
.B \-E
Invoke only the preprocessor.  The result is preprocessed source.
.TP
.BI "\-o " FILE
Places the output of the compilation processes into
.IR FILE .
.TP
.B \-pipe
Use pipes instead of temporary files to pass data between compilation stages.
.TP
.B \-S
Invoke only the preprocessor (if appropriate) and the compiler.  The result is
assembly for the target platform.
.TP
.B \-\-save\-temps
Save the temporary files created during the compilation process.  This is useful
when filing a bug report.
.TP
.B \-v
Prints information about the version and configuration of the compiler, and if
any compilation or preprocessing step occurs, also prints information about the
compilation process used in those steps.
.TP
.BI \-Wa, OPTION
Pass OPTION to the assembler.
.TP
.BI \-Wl, OPTION
Pass OPTION to the linker.
.TP
.BI \-Wp, OPTION
Pass OPTION to the preprocessor.
.TP
.BI "\-x " LANGUAGE
The following files are to be interpreted as being in LANGUAGE.
This continues until another
.B \-x
option is given.
If LANGUAGE is
.BR none ,
revert to autodetection based on the file's extension.
Valid values include
.BR c ,
.BR c++ ,
.BR assembler ,
and
.BR none .
.SS "Options for C-like Languages"
.TP
.B \-ansi
Equivalent to
.B \-std=c89
for C and
.B \-std=c++98
for C++.
.TP
.BR \-std =\fISTANDARD\fP
Specify that the input conforms and the compiler should conform to STANDARD.
For C, this can be
.BR c89 ,
.BR c90 ,
or
.BR iso9899:1990
(for the ISO 1990 C standard);
.BR iso9899:199409
(for the ISO 1990 C standard as amended in 1994);
.BR c99 ,
.BR c9x ,
.BR iso9899:1999 ,
or
.BR iso9899:199x
(for the ISO 1999 C standard);
.B c1x
or
.B c11
(for the ISO 2011 C standard);
or one of
.BR gnu89 ,
.BR gnu90 ,
.BR gnu99 ,
.BR gnu9x ,
.BR gnu1x ,
or
.B gnu11
for the corresponding standard with GNU extensions.
For C++, this can be
.BR c++98 ,
or
.BR c++03
(for the ISO 1998 C++ standard as amended in 2003);
.BR c++0x
(for the ISO 2011 C++ standard);
or one of
.BR gnu++98
or
.BR gnu++0x
for the corresponding standard with GNU extensions.
.SS "Warning Options"
.PP
All the options beginning with
.B \-W
can take a negative form by using
.B \-Wno\-
instead.  If multiple arguments modify the same warning, the last modification
wins.
.TP
.B \-pedantic
Warn whenever the appropriate standard requires a diagnostic.
.TP
.B \-pedantic\-errors
Signal an error whenever the appropriate standard requires a diagnostic.
.TP
.B \-Wall
Enable most warnings.
.TP
.B \-Warray\-bounds
Warn when the compiler detects an out-of-bounds array access.
Enable most warnings.
.TP
.B \-Wcast\-align
Warn when a pointer is cast to a type that requires increased alignment.  For
example, warn when a
.B "char *"
is cast to an
.BR "int *" .
This warning has no effect on architectures which do not require data to be
aligned.
.TP
.B \-Wconversion\-null
Warn when attempting to convert NULL to or from a non-pointer type.  This is
usually a mistake.
.TP
.B \-Wdeprecated
Warn if a function marked with a
.I deprecated
attribute is used.
.TP
.B \-Wdiv-by-zero
Warn if an attempt is made to divide by integer zero at compile time.
Floating-point zero is not warned about, as it may be a legitimate attempt to
create infinities or not-a-number (NaN) values.  This does not catch runtime
division by zero.
.TP
.B \-Wdouble-promotion
Warn if operands of type
.BR float
are implicitly convert to
.BR double .
.TP
.B \-Wendif-labels
Warn if there are extra tokens after an #else or #endif, as they take no
arguments.  Comments do not trigger the warning.
.TP
.B \-Werror
Treat all warnings as errors.
.TP
.BR \-Werror =\fINAME\fP
Treat warning NAME as an error.
.TP
.B \-Wextra
Enable additional warnings that
.B \-Wall
does not.  While
.B \-Wall
selects warnings that are less likely to produce false positives,
.B \-Wextra
enables additional warnings that some people may find excessive or too likely
to have false positives.  This switch was formerly called
.BR \-W ;
that name is still permitted for backwards compatibility.
.TP
.B \-Wfloat-equal
Warn if floating-point numbers are compared for equality.  Due to rounding
inherent in the computation of floating-point numbers, it is possible for two
expressions that would compare mathematically equal to produce different
floating-point values.  As a result, it is preferable to use something like the
following to compare against a suitably small value, such as:
.sp
.RS 1i
if (fabs(x - y) < 0.0001)
.br
	do_something();
.RE
.IP
rather than
.sp
.RS 1i
if (x == y)
.br
	do_something();
.RE
.IP
as this is more robust.
.TP
.B \-Wformat
Warn about strange uses of
.BR printf ,
.BR scanf ,
.BR strftime ,
and
.BR strfmon
format strings.  Strings marked with the
.IR printf
attribute are similarly flagged.
.TP
.B \-Wformat-contains-nul
Warn if a format string contains a NUL byte.  As these are C-style strings, this
will abruptly terminate the string.
.TP
.B \-Winline
Warn if a function marked
.I inline
cannot be inlined.
.TP
.B \-Woverflow
Warn if an arithmetic expression might overflow.
.TP
.B \-Wpacked
Warn if the
.I packed
attribute has no effect on the layout of the structure in question.
.TP
.B \-Wparentheses
Warn about constructs which might need parentheses, such as for operator
precedence reasons.
.TP
.B \-Wstack\-protector
Warn if the stack protector will not be used for a given function.
.TP
.BR \-Wstrict\-aliasing [=\fILEVEL\fP]
Warn if the code may violate strict aliasing rules.  Larger values of LEVEL may
be used to catch more potential violations at the cost of more false positives.
.TP
.BR \-Wstrict\-overflow [=\fILEVEL\fP]
Warn if the optimizations in use assume that signed overflow is undefined.
Larger values of LEVEL may be used to catch more potential problems at the
cost of more false positives.
.TP
.B \-Wshadow
Warn if one variable declaration shadows (that is, uses the same name as)
another.
.TP
.B \-Wswitch
Warn if a switch on an enum is missing a case and there is not a default.
.TP
.B \-Wswitch\-default
Warn if a switch on an enum is missing a default.
.TP
.B \-Wswitch\-enum
Warn if a switch on an enum is missing a case.
.TP
.B \-Wtrampolines
Warn if a trampoline will be generated.  This is usually only the case for
nested functions.
.TP
.B \-Wtype\-limits
Warn if an comparison is always true or always false because of the limits or
signedness of the type.
.TP
.B \-Wuninitialized
Warn if a variable may be used uninitialized.
.TP
.B \-Wunused\-but\-set\-parameter
Warn if a parameter is set but is otherwise unused.
.TP
.B \-Wunused\-but\-set\-variable
Warn if a variable is set but is otherwise unused.
.TP
.B \-Wunused\-function
Warn if a function is unused.
.TP
.B \-Wunused\-parameter
Warn if a parameter to a function is unused.
.TP
.B \-Wunused\-value
Warn if the value of an expression is unused and has no side effects.
.TP
.B \-Wunused\-variable
Warn if a variable is unused.
.SS "Options to Control Code Generation and Optimization"
.TP
.BR \-ffunction\-sections
Place each function in its own section.  This may be needed on certain
architectures that have branch instructions that have a limited distance.
.TP
.BR \-flto
When compiling, generate an intermediate representation as well as normal code.
When linking, use this intermediate representation to optimize across files.
In order to work, this option must be given both when compiling and linking.
.TP
.BR \-fomit\-frame\-pointer
Omit the frame pointer.  On some architectures, the register normally used for
the frame pointer can be pressed into use, which may allow the compiler to
generate code.  On other architectures, the frame pointer is part of the
standard calling sequence and omitting it is not useful.  Using this option may
impede debugging on some architectures.
.TP
.BR \-fPIC
Generate position-independent code.  This is generally required for shared
libraries to function correctly.  On some platforms, all code is
position-independent and this option has no effect.  Using it anyway will
produce a warning.
.TP
.BR \-fPIE
Generate position-independent code suitable only for executables.  The resulting
code cannot be linked into a shared library, but is still useful to generate
binaries that will work with ASLR (address space layout randomization).  On some
platforms, all code is position-independent and this option has no effect.
Using it anyway will produce a warning.
.TP
.BR \-fstack\-protector
Generate code to check for stack overflows in most functions.
.TP
.BR \-fstack\-protector\-all
Generate code to check for stack overflows in all functions, no matter how
small.
.TP
.BR \-fwhole\-program
This option tells the compiler to try to optimize the program as a whole.  This
only works when all the source files are passed on the command line.
.TP
.BR \-fwrapv
Signed overflow is undefined.  This option makes the compiler assume that signed
overflow wraps around.  The use of this option may enable certain optimizations
and disable others as a result of this assumption.
.TP
.BR \-g
Generate debugging information in the default format for this platform.
Enabling optimization may cause the debugging information to appear strange.
.TP
.BI \-O NUMBER
If NUMBER is 0, do not optimize the code at all.  Otherwise, if NUMBER is
positive, optimize the code.  NUMBER may be as large as 3, each value taking
progressively more time and memory to optimize.
.TP
.B \-Ofast
Optimize the code aggressively without regard for standards compliance.
.TP
.B \-Os
Optimize the code for size, not speed.
.TP
.B \-shared
Generate a shared library.  Generally this will be used with
.BR \-fPIC .
.SS "Options to Control Code Syntax"
.TP
.B \-fpermissive
Be more lenient in accepting invalid code.  Since
.B gcc
tends to become stricter over time, especially with regard to C++ conformance,
this option can be used to allow older code to compile temporarily.
.TP
.B \-fsigned\-char
.TP
.B \-funsigned\-char
The
.B char
type, while distinct from
.B "signed char"
and
.BR "unsigned char" ,
has the range of values of either the former or the latter.  Which one
specifically is dependent on the architecture and platform, and is usually
specified in the appropriate ABI.  This option allows the default to be changed
for a given file or files.
.SS "Options for alpha Systems"
.TP
.B \-mieee
Enable IEEE floating-point support.
.SS "Options for i386 and amd64 Systems"
.TP
.B \-m32
.TP
.B \-m64
Generate code for a 32-bit (i386) or 64-bit (amd64) system.  Code compiled with
different values for this option cannot be combined.
.TP
.BR \-march =\fIARCH\fP
Generate code that will run on ARCH.  Because this affects the set of
instructions generated, the generated code will only run on systems supporting
all of the instructions provided by ARCH.  This may be one of the following:
.BR i386 ,
.BR i486 ,
.BR i586
or
.BR pentium ,
.BR i686
or
.BR pentiumpro ,
.BR pentiumii ,
.BR pentiumiii ,
.BR pentium4 ,
.BR prescott ,
.BR nocona ,
.BR core ,
.BR core2 ,
.BR corei7 ,
.BR l1om ,
.BR k1om ,
.BR k6 ,
.BR k6_2 ,
.BR athlon ,
.BR opteron ,
.BR k8 ,
.BR amdfam10 ,
.BR bdver1 ,
or
.BR bdver2 .
Please note that the values starting with the letter
.I i
are for the Intel versions of those processors.  Thus a system that meets the
architectural requirements to be an i686 but does not contain a cmov instruction
(such as some VIA chips)
will not be able to run code compiled with
.BR \-march=i686 .
.TP
.BR \-masm =\fIFORM\fP
Specify the syntax form for the generated assembly.  FORM may be either
.I att
for the default AT&T syntax or
.I intel
for Intel syntax.
.TP
.B \-mcld
Enable the generation of cld (clear direction flag) instructions in the function
prologue.  The ABI requires that the direction flag already be cleared upon
entering a function.  However, some operating systems have a bug where they do
not clear the direction flag when calling signal handlers, so this option is
provided to work around that bug.
.TP
.B \-mmmx
.TP
.B \-msse
.TP
.B \-msse2
.TP
.B \-msse3
.TP
.B \-mssse3
.TP
.B \-msse4.1
.TP
.B \-msse4.2
.TP
.B \-msse4
.TP
.B \-mavx
Generate code supporting the given instruction set (and all others listed
previously) and support built-in functions for those instruction sets.
.B \-msse4
is equivalent to
.BR "\-msse4.1 \-msse4.2" .
Additionally, if
.B \-mavx
is used, the AVX encoding of these instructions is used instead of the normal
MMX or SSE encoding.  Finally, when compiling for a 64-bit system,
.B \-msse2
is implicit because the ABI requires it for floating-point support.
.TP
.B \-mno\-red\-zone
The amd64 ABI requires a 128-byte red zone that is left untouched by signal
handlers and exceptions.  Using this option disables that red zone.
.TP
.B \-mpc32
.TP
.B \-mpc64
.TP
.B \-mpc80
Set the precision of the 80387 to 32 bits (float), 64 bits (double), or 80 bits
(long double).  The default setting depends on the operating system.
.TP
.BR \-mtune =\fIARCH\fP
Tune the generated code to run optimally on ARCH.  This does not affect the set
of instructions generated (cf.
.BR \-march )
but does affect such things as instruction scheduling.
.SH EXIT STATUS
Exits 0 on success, or nonzero on error.
.\".SH FILES
.SH "CONFORMING TO"
.B gcc
attempts conforms to the relevant standards when an appropriate
.B -std
option is specified with
.BR -pedantic .
If it does not, please file a bug.
.\".SH NOTES
.SH BUGS
When reporting bugs, please follow the directions listed in
.IR /usr/share/doc/gcc/README.Bugs .
Without providing sufficient information, your bug will not be able to be
reproduced or investigated and therefore will not be able to be fixed.
.PP
This manual page was written because the manual pages provided with
.B gcc
are not Free Software according to the Debian Free Software Guidelines.  As
such, you should not bother the Free Software Foundation with it.  Please report
bugs in this manual page to brian m. carlson <sandals@crustytoothpaste.net>.
.\".SH "SEE ALSO"
.\" vim: set ft=groff:
